type: edu
custom_name: Wanted!
files:
- name: src/analyzer/Main.java
  visible: true
  text: |
    package analyzer;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/Clue.java
  visible: false
  text: |
    public class Clue {
        public String output;
        public int threadsStarted;
        public String feedback;

        public Clue(String output, int threadsStarted, String feedback) {
            this.output = output;
            this.threadsStarted = threadsStarted;
            this.feedback = feedback;
        }

    }
  learner_created: false
- name: test/MainTest.java
  visible: false
  text: |2

    import analyzer.Main;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import org.junit.AfterClass;
    import org.junit.BeforeClass;

    import java.io.File;
    import java.io.IOException;
    import java.lang.management.ManagementFactory;
    import java.nio.file.Files;
    import java.nio.file.Paths;
    import java.util.List;
    import java.util.function.Function;

    public class MainTest extends StageTest<Clue> {
        private static final String CURRENT_DIR = System.getProperty("user.dir") + File.separator;
        private static int startedThreadCount = 0;

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                    //Testing basic cases
                    new TestCase<Clue>()
                            .addArguments(new String[]
                                    {"test_files", "%PDF-", "PDF document"})
                            .addFile("test_files" + File.separator + "doc.pdf", "PFDF%PDF-PDF")
                            .addFile("test_files" + File.separator + "text.txt", "PF%PDF-PDFABC")
                            .setAttach(new Clue("doc.pdf: PDF document\n" +
                                    "text.txt: PDF document", 2, "The files had following content: " + "\n" +
                                    "\"PFDF%PDF-PDF\", \"PF%PDF-PDFABC\" and were analyzed for pattern \"%PDF-\"")),

                    new TestCase<Clue>()
                            .addArguments(new String[]
                                    {"test_files", "-----BEGIN\\CERTIFICATE-----", "PEM certificate"})
                            .addFile("test_files" + File.separator + "file.pem", "PF-----BEGIN\\CERTIFICATE-----DF%PDF-PDF")
                            .addFile("test_files" + File.separator + "file.pdf", "PF%P-----BEGIN\\CERTIFICATE-----DF-PDF")
                            .setAttach(new Clue("file.pdf: PEM certificate\n" +
                                    "file.pem: PEM certificate", 2, "")),

                    //Testing with only one file in the directory
                    new TestCase<Clue>()
                            .addArguments(new String[]
                                    {"test_files", "-----BEGIN\\CERTIFICATE-----", "PEM certificate"})
                            .addFile("test_files" + File.separator + "the_only_file.pem", "PF-----BEGIN\\CERTIFICATE-----DF%PDF-PDF")
                            .setAttach(new Clue("the_only_file.pem: PEM certificate", 1, "")),

                    //Testing with 10 files in the directory
                    new TestCase<Clue>()
                            .addArguments(new String[]
                                    {"test_files", "%txt-", "TXT document"})
                            .addFile("test_files" + File.separator + "doc0.pdf", "PFDF%PDF%txt-PDF")
                            .addFile("test_files" + File.separator + "doc1.pdf", "PF%PDF%txt-PDF")
                            .addFile("test_files" + File.separator + "doc2.pdf", "PFDF%PDF%txt-PF")
                            .addFile("test_files" + File.separator + "doc3.pdf", "PF%PF%txt-PDF")
                            .addFile("test_files" + File.separator + "doc4.pdf", "PFDF%PDF%txt-PDF")
                            .addFile("test_files" + File.separator + "doc5.pdf", "PF%PDF%txt-PDF")
                            .addFile("test_files" + File.separator + "doc6.pdf", "PFF%PDF%txt-PDF")
                            .addFile("test_files" + File.separator + "doc7.pdf", "PF%DF%txt-PDF")
                            .addFile("test_files" + File.separator + "doc8.pdf", "PFDF%PDFPDF")
                            .addFile("test_files" + File.separator + "doc9.txt", "PF%PDF%PDF")
                            .setAttach(new Clue("doc0.pdf: TXT document\n" +
                                    "doc1.pdf: TXT document\n" +
                                    "doc2.pdf: TXT document\n" +
                                    "doc3.pdf: TXT document\n" +
                                    "doc4.pdf: TXT document\n" +
                                    "doc5.pdf: TXT document\n" +
                                    "doc6.pdf: TXT document\n" +
                                    "doc7.pdf: TXT document\n" +
                                    "doc8.pdf: Unknown file type\n" +
                                    "doc9.txt: Unknown file type", 10, ""))
            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {
            long currentThreads = ManagementFactory.getThreadMXBean().getTotalStartedThreadCount();
            long startedThisTestThread = currentThreads - startedThreadCount;

            long neededThreads = startedThreadCount + clue.threadsStarted;
            long startedThisTestNeededThreads = neededThreads - startedThreadCount;

            Function<Long, String> threadName = count ->
                    count + " thread" + (count == 1 ? "" : "s");

            if (startedThisTestThread < startedThisTestNeededThreads) {
                return CheckResult.wrong(
                        "There were not enough Threads started, " +
                                "you should process each file in a different Thread. " +
                                "\nYou started " + threadName.apply(startedThisTestThread) + ", " +
                                "but you need to start " + threadName.apply(startedThisTestNeededThreads) + ". " +
                                "\nThe executor.invokeAll() method might help. Also, don't forget to call .shutdown()."
                );
            }

            startedThreadCount = (int) currentThreads;

            String[] expectedLines = clue.output.split("\n");
            String actual = reply.strip();

            if (actual.isEmpty()) {
                return CheckResult.wrong("No output (check if you exited " +
                        "from main too early, you should wait until all threads are finishes)");
            }

            int expectedLinesLength = expectedLines.length;

            if (actual.trim().split("\n").length != expectedLines.length) {
                return CheckResult.wrong(String.format("There is should be %d lines in the output when you check %d files!\nMake sure you don't print empty lines.", expectedLinesLength, expectedLinesLength));
            }

            for (String expectedLine : expectedLines) {
                if (!actual.toLowerCase().contains(expectedLine.toLowerCase())) {
                    return new CheckResult(false, "Can't find the line '"
                            + expectedLine + "' in the output!");
                }
            }

            return CheckResult.correct();
        }

        @BeforeClass
        public static void generateTestFilesDirectory() {
            try {
                Files.deleteIfExists(Paths.get(CURRENT_DIR + "test_files"));
            } catch (IOException ex) {
                ex.printStackTrace();
            }
            try {
                Files.createDirectory(Paths.get(CURRENT_DIR + "test_files"));
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }

        @BeforeClass
        public static void countThreadsBefore() {
            startedThreadCount += ManagementFactory.getThreadMXBean().getTotalStartedThreadCount();
        }

        @AfterClass
        public static void deleteTestFilesDirectory() {
            try {
                Files.deleteIfExists(Paths.get(CURRENT_DIR + "test_files"));
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }

    }
  learner_created: false
- name: src/analyzer/FindPatternMachine.java
  visible: true
  text: |
    package analyzer;

    public class FindPatternMachine {

        private FindPatternMethod findPatternMethod;

        public void setMethod(FindPatternMethod findPatternMethod) {
            this.findPatternMethod = findPatternMethod;
        }

      public boolean find(String originalText, String pattern) {
            return this.findPatternMethod.find(originalText, pattern);
      }
    }
  learner_created: true
- name: src/analyzer/KMPMethod.java
  visible: true
  text: |
    package analyzer;

    import java.util.ArrayList;
    import java.util.List;

    public class KMPMethod implements FindPatternMethod {

        private int[] prefixFunction(String str) {
            int[] prefixArr = new int[str.length()];

            // index i for the original string str and the prefixArr, prefixArr[0] = 0 by convention
            for (int i = 1; i < str.length(); i++) {

                // val is the value in the prefixArr at the index i - 1
                int val = prefixArr[i - 1];

                /* if there is a matching streak (val > 0)
                and at i this matching streak will be broken (str.charAt(i) != str.charAt(val))
                then the val of this prefixArr[i] will be smaller
                to be more specific,
                this new val will equal the val at prefix[somewhere that the streak will not be broken at i]
                */
                while (val > 0 && str.charAt(i) != str.charAt(val)) {
                    val = prefixArr[val - 1];
                }

                // increase the val if the matching streak continue even at i
                if (str.charAt(i) == str.charAt(val)) {
                    val++;
                }

                // now save val into prefixArr[i]
                prefixArr[i] = val;
            }

            return prefixArr;
        }

        private List<Integer> KMPSearch(String text, String pattern) {

            int[] prefixArr = prefixFunction(pattern);
            ArrayList<Integer> occurrences = new ArrayList<>();

            // j is the index of pattern and the prefixArr
            int j = 0;

            // i is the index of original text
            for (int i = 0; i < text.length(); i++) {

                // j has not move back to the original 0 start point yet
                // if j has move back to the original 0, skip this part
                // and the char at i break the matching streak with the pattern (at j+1 position)
                while (j > 0 && text.charAt(i) != pattern.charAt(j)) {

                    /* move the j back to the index where at that index a small head part from prefixArr[0] to prefixArr[that index]
                    has been matched with the text already
                    so we don't need to compare that head part anymore
                    */

                    j = prefixArr[j - 1];
                }


                if (text.charAt(i) == pattern.charAt(j)) {
                    j++;
                }

                if (j == pattern.length()) {
                    occurrences.add(i - j + 1);
                    j = prefixArr[j - 1];
                }
            }

            return occurrences;
        }

        @Override
        public boolean find(String originalText, String pattern) {

            var occurrences = this.KMPSearch(originalText, pattern);
            return !occurrences.isEmpty();
        }
    }
  learner_created: true
- name: src/analyzer/NaiveMethod.java
  visible: true
  text: |
    package analyzer;

    public class NaiveMethod implements FindPatternMethod {

        @Override
        public boolean find(String originalText, String pattern) {
            return originalText.contains(pattern);
        }

    }
  learner_created: true
- name: src/analyzer/FindPatternMethod.java
  visible: true
  text: |
    package analyzer;

    public interface FindPatternMethod {
        boolean find(String originalText, String pattern);
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/64/stages/345/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sun, 28 Feb 2021 15:39:48 UTC
record: 3
